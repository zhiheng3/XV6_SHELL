程序完全仿照Vim进行设计，实现了Vim的部分功能。

具体的实现方法：
由于Vim需要完全控制Console，因此添加了一条系统调用setconsole，用来进行Console的写入和光标的控制，以及设置Console的模式。
在程序中主要将文本存储在一个缓冲区textbuf中，插入和删除文本时都对textbuf进行相应更改，并更新界面。
当Console模式为2时，Console中每接到一个字符输入立即将字符传给进程，本身不做任何处理。在Vim程序中读取每一个字符进行相应的处理。
处理的逻辑为：
1、首先判断字符是不是特殊的控制字符，如键盘的上下左右键，Esc、Insert、Home、End键等，如果是，则进行相应的操作，否则转到2
2、判断当前的输入模式，0为控制模式，1和2为输入模式。如果是控制模式，则转到3，否则转到4
3、在控制模式下，指令分为2种，单字符指令和多字符指令，其中r和:开头的指令是多字符指令，其余为单字符指令。对于单字符指令，输入后立即执行并清除指令缓冲区。对于r指令，直到检测到第二个输入的字符才执行并清除指令缓冲区。对于:开头的指令，当用户输入回车时才进行执行。
4、在输入模式下，处理的方式和普通的文本编辑器基本一致。

细节实现：
1、光标移动的实现。光标的移动只能在已有的行间进行，每一行只能移动到最后一个字符的下一个位置。当光标移动到最上方或最下方时需要进行翻页处理。程序中用一个startline来记录当前屏幕上第0行对应的是textbuf中的第几行，翻页操作只需要修改startline并刷新页面即可实现。
2、插入和删除的实现。插入和删除有两个子功能：插入一行和删除一行。当用户输入回车时，则要将本行光标后的内容移到新建的下一行。当用户在行首输入空格时，要将本行的内容接到上一行并删除本行。具体的实现都是采用数组循环复制的方法，例如要删除一行的第i个字符，则将第i+1个字符复制到位置i，第i+2个字符复制到位置i+1，以此类推。插入的实现类似。
3、信息栏的实现。程序单独将最下面一行留作信息栏，显示提示信息、:开头的命令以及光标所在的位置，程序采用了两个函数进行信息和光标位置的设定。

使用方法：

打开Vim：在shell中输入vim filename（中间有空格），打开文件。如果文件不存在则创建一个新的文件。

Vim的输入有两种模式，一种是控制模式，一种是输入模式。输入状态又分为插入模式和替换模式。

控制模式：用户可以输入各种控制指令，支持的指令列表如下：
i 在当前光标处开始插入字符
o 新建一行并开始插入字符
a 在当前光标下一个位置开始插入字符
A 在行尾开始插入字符
r 替换光标处的字符，需要连续输入，例如输入ra则将光标处字符替换为a
R 进入替换模式
x 删除光标处的字符
h 光标左移
j 光标右移
k 光标下移
l 光标上移
d 删除光标所在行
:q 退出
:w 保存，可以加参数指定保存到哪个文件，如:w test，默认为打开的文件。
:wq save & quit 保存并退出
:q! quit without save 不保存退出

在输入模式下的操作和一般的文本编辑器类似，可以用键盘的上下左右移动光标。在输入模式下按Esc可以退回到控制模式
